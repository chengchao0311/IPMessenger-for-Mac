//
//  MessageView.m
//  IPMessenger
//
//  Created by ZhanHongjin on 14-4-23.
//
//

#import "MessageView.h"

@implementation MessageView
@synthesize window;
@synthesize sendedTextView;
@synthesize editTextView;
@synthesize historyTextView;
@synthesize hisrotyButtonAction;
@synthesize info;
@synthesize selfInfo;
@synthesize managedObjectContext;
@synthesize persistentStoreCoordinator;
@synthesize managedObjectModel;

-(void)initWindow{
    
	// Nibファイルロード
	if (![NSBundle loadNibNamed:@"MessageWindow" owner:self]) {
        return nil;
	}
    
    [sendedTextView setEditable:NO];

    [window setTitle:@"对话框"];


    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(recvMessage:) name:@"RecvMessage" object:nil];
    
//    [self loadRecord];
    
}



- (void)receiveMessage:(RecvMessage *)msg{
    UserInfo * info = [msg fromUser];
    NSDate * date = [[NSDate date] dateByAddingTimeInterval:3600*8];
    NSString * string = [NSString stringWithFormat:@"%@\n%@:(%@)\n %@",[[sendedTextView textStorage] string],[msg fromUser].userName,[date.description substringToIndex:19],msg.appendix];
    [sendedTextView setString:string];
    [sendedTextView setEditable:NO];
}


- (IBAction)sendButtonAction:(id)sender {
    
    if ([[[editTextView textStorage] string] isEqualToString:@""]) {
        return;
    }
    
    SendMessage *	snedMessage;
	NSMutableArray*	to;
	NSString*		msg;
	BOOL			sealed;
	BOOL			locked;

	Config*			config = [Config sharedConfig];
    //	NSUInteger		index;
    
    // 送信情報整理
	msg		= [[editTextView textStorage] string];
	sealed	= NO;
	locked	= NO;
	to		= [[NSMutableArray alloc] init] ;
    [to addObject:info];
    
	// 送信情報構築
	snedMessage = [SendMessage messageWithMessage:msg
							   attachments:nil
									  seal:sealed
									  lock:locked];
	// メッセージ送信
	[[MessageCenter sharedCenter] sendMessage:snedMessage to:to];
	// ログ出力
	[[LogManager standardLog] writeSendLog:snedMessage to:to];
	// 受信ウィンドウ消去（初期設定かつ返信の場合）
    //	if (config.hideReceiveWindowOnReply) {
    //		ReceiveControl* receiveWin = [[WindowManager sharedManager] receiveWindowForKey:receiveMessage];
    //		if (receiveWin) {
    //			[[receiveWin window] performClose:self];
    //		}
    //	}
    NSDate * date = [[NSDate date] dateByAddingTimeInterval:3600*8];
    NSString * string = [NSString stringWithFormat:@"%@\n%@:(%@)\n %@",[[sendedTextView textStorage] string],[selfInfo userName],[date.description substringToIndex:19],[[editTextView textStorage]string]];
    [sendedTextView setString:string];
    [editTextView setString:@""];
    
}


- (NSString *)loadRecordWithNumber:(int)historyNumber{
    NSManagedObjectContext *context = [self managedObjectContext];
    NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init];
    NSEntityDescription *entity = [NSEntityDescription entityForName:@"Message" inManagedObjectContext:context];
    
    NSDate *now = [NSDate date];
    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSGregorianCalendar];
    NSDateComponents *components = [calendar components:NSYearCalendarUnit|NSMonthCalendarUnit|NSDayCalendarUnit fromDate:now];
    [components setHour:0];
    [components setMinute:0];
    [components setSecond:0];
    NSDate *startOftoday = [calendar dateFromComponents:components];
    
    NSPredicate *pred = [NSPredicate predicateWithFormat:@"(to = %@ OR from = %@) AND sendTime > %@", info.ipAddress, info.ipAddress, startOftoday];
    
    NSSortDescriptor *sortDesc = [[NSSortDescriptor alloc] initWithKey:@"sendTime" ascending:NO];
    [fetchRequest setSortDescriptors:@[sortDesc]];
    
    [fetchRequest setPredicate:pred];
    [fetchRequest setEntity:entity];
    [fetchRequest setFetchLimit:historyNumber];
    NSError *error;
    NSArray *fetchedObjects = [context executeFetchRequest:fetchRequest error:&error];
    NSDateFormatter *dateFormater = [[NSDateFormatter alloc] init];
    [dateFormater setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    [historyTextView setString:@""];
    NSString * historyString = @"";
    for (int i = [fetchedObjects count]-1;i>=0;i--) {
        Message *msg = [fetchedObjects objectAtIndex:i];
        NSLog(@"message :%@ from :%@  to :%@ date = %@",msg.content,msg.from,msg.to, [dateFormater stringFromDate:msg.sendTime]);
        NSLog(@"-----------------");
        NSString * oneHistory;
        if (![msg.to isEqualToString:@"self"]) {
            oneHistory = [NSString stringWithFormat:@"%@ : (%@)\n %@\n",selfInfo.userName, [dateFormater stringFromDate:msg.sendTime],msg.content];
        }else{
            oneHistory = [NSString stringWithFormat:@"%@ : (%@)\n %@\n",info.userName, [dateFormater stringFromDate:msg.sendTime],msg.content];
        }
        historyString = [historyString stringByAppendingString:oneHistory];
    }
    
    return historyString;
}

#pragma -Core Data
- (NSManagedObjectContext *) managedObjectContext {
    if (managedObjectContext != nil) {
        return managedObjectContext;
    }
    NSPersistentStoreCoordinator *coordinator = [self persistentStoreCoordinator];
    if (coordinator != nil) {
        managedObjectContext = [[NSManagedObjectContext alloc] init];
        [managedObjectContext setPersistentStoreCoordinator: coordinator];
    }
    
    return managedObjectContext;
}

- (NSManagedObjectModel *)managedObjectModel {
    if (managedObjectModel != nil) {
        return managedObjectModel;
    }
    managedObjectModel = [[NSManagedObjectModel mergedModelFromBundles:nil] retain];
    
    return managedObjectModel;
}

- (NSPersistentStoreCoordinator *)persistentStoreCoordinator {
    if (persistentStoreCoordinator != nil) {
        return persistentStoreCoordinator;
    }
    
    NSURL *storeUrl = [NSURL fileURLWithPath: [[self  applicationDocumentsDirectory] stringByAppendingPathComponent: @"ipmessager3.sqlite"]];
    
    NSError *error = nil;
    NSDictionary *options = [NSDictionary dictionaryWithObjectsAndKeys:
    						 [NSNumber numberWithBool:YES], NSMigratePersistentStoresAutomaticallyOption,
    						 [NSNumber numberWithBool:YES], NSInferMappingModelAutomaticallyOption, nil];
    persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel: [self managedObjectModel]];
    if (![persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeUrl options:options error:&error]) {
        // Handle error
    }
    
    return persistentStoreCoordinator;
}
- (NSString *)applicationDocumentsDirectory {
    return [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
}

- (IBAction)histotyAction:(id)sender {
    NSString * historyString = [self loadRecordWithNumber:50];
    [historyTextView setString:historyString];
    NSRect rect = window.frame;
    if (rect.size.width == 300) {
        rect.size.width = 600;
    }else{
        rect.size.width = 300;
    }

    [window setFrame:rect display:YES];
}



@end



